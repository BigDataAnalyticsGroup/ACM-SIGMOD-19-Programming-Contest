//===== sort.cpp =======================================================================================================
//
//  Author: Immanuel Haffner <haffner.immanuel@gmail.com>
//
//  Licence:
//      Copyright 2019 Immanuel Haffner
//
//      Licensed under the Apache License, Version 2.0 (the "License");
//      you may not use this file except in compliance with the License.
//      You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.
//
//  Description:
//      This file provides algorithms to sort data on disk, generated by "gensort" from the sortbenchmark.org
//      benchmarks.
//
//======================================================================================================================

#include "sort.hpp"

#include "mmap.hpp"
#include "record.hpp"
#include <algorithm>
#include <cstdint>
#include <cstring>
#include <fstream>


void stl_sort_mmap(const char *in, const char *out)
{
    MMapFile infile(in);

    /* Access the data as array of struct. */
    auto data = reinterpret_cast<record*>(infile.addr());
    const std::size_t count = infile.size() / sizeof(*data);

    /* Sort all records. */
    std::sort(data, data + count, [](const record &first, const record &second) {
            return memcmp(first.key, second.key, 10) < 0;
            });

    /* Write the sorted data to stdout. */
    std::ofstream outfile(out);
    outfile.write(reinterpret_cast<char*>(infile.addr()), infile.size());
    outfile.flush();
}
